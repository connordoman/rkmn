use self::{
    move_data::{default_battler_moves, BattlerMoves},
    side_timer::SideTimer,
    special_status::SpecialStatus,
    struct_disable::DisableStruct,
    struct_protect::ProtectStruct,
    wish_future_knock::WishFutureKnock,
};

use super::*;

#[derive(Clone, Copy, Debug)]
pub struct StatsArray {
    state: [u16; NUM_STATS],
}

impl StatsArray {
    pub fn new() -> Self {
        Self {
            state: [0; NUM_STATS],
        }
    }
}

pub struct BattleData {
    type_flags: u32,
    terrain: u8,
    active_battler: u8,
    controller_exec_flags: u32,
    battlers_count: usize,
    battler_party_indexes: [u8; MAX_BATTLERS_COUNT],
    battler_positions: [u8; MAX_BATTLERS_COUNT],
    actions_by_turn_order: [u8; MAX_BATTLERS_COUNT],
    battler_by_turn_order: [u8; MAX_BATTLERS_COUNT],
    current_turn_action_number: u8,
    current_action_func_id: u8,
    // battle_mons: [BattleRkmn; MAX_BATTLERS_COUNT],
    current_move_pos: u8,
    chosen_move_pos: u8,
    current_move: u16,
    chosen_move: u16,
    called_move: u16,
    move_damage: i32,
    hp_dealt: i32,
    bide_damage: [i32; MAX_BATTLERS_COUNT],
    last_used_item: u16,
    last_used_ability: u8,
    battler_attacker: u8,
    battler_target: u8,
    battler_fainted: u8,
    effect_battler: u8,
    potential_item_effect_battler: u8,
    absent_battler_flags: u8,
    crit_multiplier: u8,
    multi_hit_counter: u8,
    chosen_action_by_battler: [u8; MAX_BATTLERS_COUNT],
    last_printed_moves: BattlerMoves,
    last_moves: BattlerMoves,
    last_landed_moves: BattlerMoves,
    last_hit_by_type: BattlerMoves,
    last_resulting_moves: BattlerMoves,
    locked_moves: BattlerMoves,
    last_hit_by: [u8; MAX_BATTLERS_COUNT],
    chosen_move_by_battler: BattlerMoves,
    move_result_flags: u8,
    hit_marker: u32,
    bide_target: [u8; MAX_BATTLERS_COUNT],
    side_statuses: [u16; NUM_BATTLE_SIDES],
    side_timers: [SideTimer; NUM_BATTLE_SIDES],
    statuses_3: [u32; MAX_BATTLERS_COUNT],
    disable_structs: [DisableStruct; MAX_BATTLERS_COUNT],
    pause_counter_battle: u16,
    payday_money: u16,
    random_turn_number: u16,
    battle_outcome: u8,
    protect_structs: [ProtectStruct; MAX_BATTLERS_COUNT],
    special_statuses: [SpecialStatus; MAX_BATTLERS_COUNT],
    battler_weather: u16,
    wish_future_knock: WishFutureKnock,
    sent_mons_to_opponent: [u8; 2],
    dynamic_base_power: u16,
    exp_share_exp: u16,
    // battle_enigma_berries: [BattleEnigmaBerry; MAX_BATTLERS_COUNT],
    battle_data: Battle,
    battle_resources: BattleResources,
    action_selection_cursor: [u8; MAX_BATTLERS_COUNT],
    move_selection_cursor: [u8; MAX_BATTLERS_COUNT],
    battler_status_summary_task_id: [u8; MAX_BATTLERS_COUNT],
    battler_in_menu_id: u8,
    doing_battle_anim: bool,
    transformed_personalities: [u32; MAX_BATTLERS_COUNT],
    player_dpad_hold_frames: u8,
    // battle_controller_opponent_healthbox_data: BattleHealthboxInfo,
    // battle_controller_opponent_flank_healthbox_data: BattleHealthboxInfo,
    battle_move_power: u16,
    move_to_learn: u16,
    battle_mon_forms: [u8; MAX_BATTLERS_COUNT],
}

impl BattleData {
    pub fn new() -> Self {
        Self {
            type_flags: 0,
            terrain: 0,
            active_battler: 0,
            controller_exec_flags: 0,
            battlers_count: DEFAULT_BATTLERS_COUNT,
            battler_party_indexes: [0; MAX_BATTLERS_COUNT],
            battler_positions: [0; MAX_BATTLERS_COUNT],
            actions_by_turn_order: [0; MAX_BATTLERS_COUNT],
            battler_by_turn_order: [0; MAX_BATTLERS_COUNT],
            current_turn_action_number: 0,
            current_action_func_id: 0,
            // battle_mons: [BattleRkmn::new(); MAX_BATTLERS_COUNT],
            current_move_pos: 0,
            chosen_move_pos: 0,
            current_move: 0,
            chosen_move: 0,
            called_move: 0,
            move_damage: 0,
            hp_dealt: 0,
            bide_damage: [0; MAX_BATTLERS_COUNT],
            last_used_item: 0,
            last_used_ability: 0,
            battler_attacker: 0,
            battler_target: 0,
            battler_fainted: 0,
            effect_battler: 0,
            potential_item_effect_battler: 0,
            absent_battler_flags: 0,
            crit_multiplier: 0,
            multi_hit_counter: 0,
            chosen_action_by_battler: [0; MAX_BATTLERS_COUNT],
            last_printed_moves: default_battler_moves(),
            last_moves: default_battler_moves(),
            last_landed_moves: default_battler_moves(),
            last_hit_by_type: default_battler_moves(),
            last_resulting_moves: default_battler_moves(),
            locked_moves: default_battler_moves(),
            last_hit_by: [0; MAX_BATTLERS_COUNT],
            chosen_move_by_battler: default_battler_moves(),
            move_result_flags: 0,
            hit_marker: 0,
            bide_target: [0; MAX_BATTLERS_COUNT],
            side_statuses: [0; NUM_BATTLE_SIDES],
            side_timers: [SideTimer::new(); NUM_BATTLE_SIDES],
            statuses_3: [0; MAX_BATTLERS_COUNT],
            disable_structs: [DisableStruct::new(); MAX_BATTLERS_COUNT],
            pause_counter_battle: 0,
            payday_money: 0,
            random_turn_number: 0,
            battle_outcome: 0,
            protect_structs: [ProtectStruct::new(); MAX_BATTLERS_COUNT],
            special_statuses: [SpecialStatus::new(); MAX_BATTLERS_COUNT],
            battler_weather: 0,
            wish_future_knock: WishFutureKnock::new(),
            sent_mons_to_opponent: [0; 2],
            dynamic_base_power: 0,
            exp_share_exp: 0,
            // battle_enigma_berries: [BattleEnigmaBerry::new(); MAX_BATTLERS_COUNT],
            battle_data: Battle::new(),
            battle_resources: BattleResources::new(),
            action_selection_cursor: [0; MAX_BATTLERS_COUNT],
            move_selection_cursor: [0; MAX_BATTLERS_COUNT],
            battler_status_summary_task_id: [0; MAX_BATTLERS_COUNT],
            battler_in_menu_id: 0,
            doing_battle_anim: false,
            transformed_personalities: [0; MAX_BATTLERS_COUNT],
            player_dpad_hold_frames: 0,
            // battle_controller_opponent_healthbox_data: BattleHealthboxInfo::new(),
            // battle_controller_opponent_flank_healthbox_data: BattleHealthboxInfo::new(),
            battle_move_power: 0,
            move_to_learn: 0,
            battle_mon_forms: [0; MAX_BATTLERS_COUNT],
        }
    }

    pub fn num_battlers(&self) -> usize {
        self.battlers_count
    }
}
